
name: Upload video to YouTube (Pexels)

on:
  workflow_dispatch:   # يتيح تشغيل يدوي من Actions
  # schedule:
  #  - cron: '0 10 * * *'  # لو عايز تشغيل تلقائي مثلا كل يوم 10:00 UTC

jobs:
  upload:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Install jq (JSON parser)
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Download a video from Pexels (relaxing)
      env:
        PEXELS_API_KEY: ${{ secrets.PEXELS_API_KEY }}
      run: |
        echo "Searching Pexels..."
        curl -s -H "Authorization: $PEXELS_API_KEY" "https://api.pexels.com/videos/search?query=relaxing&per_page=1" > response.json
        if [ "$(jq -r '.videos | length' response.json)" = "0" ]; then
          echo "No videos found" >&2
          exit 1
        fi
        VIDEO_URL=$(jq -r '.videos[0].video_files[0].link' response.json)
        echo "Found video URL: $VIDEO_URL"
        curl -L "$VIDEO_URL" -o video.mp4
        ls -lh video.mp4

    - name: Get Access Token from Refresh Token
      id: get_token
      env:
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
      run: |
        echo "Requesting access token..."
        resp=$(curl -s \
          -d client_id="$GOOGLE_CLIENT_ID" \
          -d client_secret="$GOOGLE_CLIENT_SECRET" \
          -d refresh_token="$YT_REFRESH_TOKEN" \
          -d grant_type=refresh_token \
          "https://oauth2.googleapis.com/token")
        echo "$resp" > token.json
        ACCESS_TOKEN=$(jq -r .access_token token.json)
        if [ "$ACCESS_TOKEN" = "null" ] || [ -z "$ACCESS_TOKEN" ]; then
          echo "Failed to get access token" >&2
          cat token.json
          exit 1
        fi
        echo "Got access token (hidden)."
        echo "access=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

    - name: Start Resumable Upload Session (create video resource)
      id: init_upload
      env:
        ACCESS_TOKEN: ${{ steps.get_token.outputs.access }}
      run: |
        TITLE="Auto upload $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
        DESCRIPTION="Uploaded automatically via GitHub Actions (Pexels source)."
        METADATA=$(jq -n \
          --arg title "$TITLE" \
          --arg desc "$DESCRIPTION" \
          '{"snippet": {"title": $title, "description": $desc, "tags":["relaxing","auto"], "categoryId":"22"}, "status": {"privacyStatus": "public"}}')
        echo "Metadata: $METADATA"
        # Start the resumable upload session
        init_resp=$(curl -s -i -X POST "https://www.googleapis.com/upload/youtube/v3/videos?uploadType=resumable&part=snippet,status" \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/json; charset=UTF-8" \
          -d "$METADATA")
        echo "$init_resp" > init_resp.txt
        # Extract upload URL from response headers
        UPLOAD_URL=$(grep -i '^Location:' init_resp.txt | awk '{print $2}' | tr -d '\r\n')
        if [ -z "$UPLOAD_URL" ]; then
          echo "Failed to get upload URL. Response:" >&2
          cat init_resp.txt
          exit 1
        fi
        echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT

    - name: Upload video data (PUT)
      env:
        UPLOAD_URL: ${{ steps.init_upload.outputs.upload_url }}
      run: |
        echo "Uploading video (this may take a while)..."
        curl -s -X PUT -T video.mp4 "$UPLOAD_URL" -H "Content-Type: application/octet-stream" -o upload_result.json
        echo "Upload result:"
        cat upload_result.json
        # Try to extract id
        VIDEO_ID=$(jq -r '.id // .id' upload_result.json 2>/dev/null || true)
        echo "Video ID: $VIDEO_ID"
        echo "::set-output name=video_id::$VIDEO_ID"

    - name: Done
      run: |
        echo "Workflow finished. Check previous steps for details."
