
name: Auto Upload Long Relaxing Videos

on:
  schedule:
    - cron: '0 9 * * *'   # 09:00 UTC
    - cron: '0 17 * * *'  # 17:00 UTC
  workflow_dispatch:

jobs:
  long_upload:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install tools
      run: |
        sudo apt-get update -y
        sudo apt-get install -y jq curl ffmpeg

    - name: Fetch video from multiple sources (Pexels -> Pixabay -> Coverr)
      env:
        PEXELS_API_KEY: ${{ secrets.PEXELS_API_KEY }}
        PIXABAY_API_KEY: ${{ secrets.PIXABAY_API_KEY }}   # optional
        COVERR_API_KEY: ${{ secrets.COVERR_API_KEY }}     # optional
      run: |
        set -e
        TOPICS=("relaxing" "rain" "ocean" "forest" "river" "fireplace" "nature")
        QUERY=${TOPICS[$RANDOM % ${#TOPICS[@]}]}
        echo "Query: $QUERY"

        # Try Pexels
        echo "Trying Pexels..."
        resp=$(curl -s -H "Authorization: $PEXELS_API_KEY" "https://api.pexels.com/videos/search?query=$QUERY&per_page=15")
        COUNT=$(echo "$resp" | jq '.videos | length')
        if [ "$COUNT" -gt 0 ]; then
          INDEX=$((RANDOM % COUNT))
          VIDEO_URL=$(echo "$resp" | jq -r ".videos[$INDEX].video_files[] | select(.quality==\"hd\") | .link" | head -n1)
        fi

        # Fallback: Pixabay (if no Pexels result or empty)
        if [ -z "$VIDEO_URL" ] || [ "$VIDEO_URL" = "null" ]; then
          echo "Pexels empty, trying Pixabay..."
          if [ -n "$PIXABAY_API_KEY" ]; then
            presp=$(curl -s "https://pixabay.com/api/videos/?key=$PIXABAY_API_KEY&q=$QUERY&per_page=20")
            COUNT=$(echo "$presp" | jq '.hits | length')
            if [ "$COUNT" -gt 0 ]; then
              INDEX=$((RANDOM % COUNT))
              VIDEO_URL=$(echo "$presp" | jq -r ".hits[$INDEX].videos.medium.url")
            fi
          fi
        fi

        # Fallback: Coverr (if key present)
        if [ -z "$VIDEO_URL" ] || [ "$VIDEO_URL" = "null" ]; then
          echo "Pixabay empty or not configured, trying Coverr..."
          if [ -n "$COVERR_API_KEY" ]; then
            cresp=$(curl -s -H "Authorization: Bearer $COVERR_API_KEY" "https://api.coverr.co/videos?per_page=20")
            VIDEO_URL=$(echo "$cresp" | jq -r '.data[0].assets[0].url' | head -n1)
          fi
        fi

        if [ -z "$VIDEO_URL" ] || [ "$VIDEO_URL" = "null" ]; then
          echo "❌ No video URL found from sources." >&2
          exit 1
        fi

        echo "Downloading: $VIDEO_URL"
        curl -L "$VIDEO_URL" -o video_raw.mp4

        # Ensure long duration: loop/extend to ~20 minutes if needed while preserving audio
        DURATION=$(ffprobe -v error -show_entries format=duration -of csv=p=0 video_raw.mp4 | cut -d. -f1)
        echo "Original duration: $DURATION sec"
        TARGET=1200  # 20 minutes
        if [ "$DURATION" -lt 300 ]; then
          echo "Extending to ~20min by looping source"
          ffmpeg -stream_loop -1 -i video_raw.mp4 -t $TARGET -c copy video.mp4 -y
        else
          mv video_raw.mp4 video.mp4
        fi

        # Ensure audio exists; if not, add gentle royalty-free loop (Mixkit or generated tone)
        if ! ffmpeg -i video.mp4 -af "volumedetect" -f null /dev/null 2>&1 | grep -q "mean_volume"; then
          echo "No audio detected — adding ambient loop (from Mixkit)"
          curl -L -o bg.mp3 "https://assets.mixkit.co/music/preview/mixkit-relaxing-piano-628.mp3" || true
          ffmpeg -stream_loop -1 -i bg.mp3 -i video.mp4 -shortest -c:v copy -c:a aac -b:a 128k final_video.mp4 -y
        else
          mv video.mp4 final_video.mp4
        fi

        ls -lh final_video.mp4

    - name: Get Access Token
      id: token
      env:
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
      run: |
        resp=$(curl -s -d client_id="$GOOGLE_CLIENT_ID" -d client_secret="$GOOGLE_CLIENT_SECRET" -d refresh_token="$YT_REFRESH_TOKEN" -d grant_type=refresh_token https://oauth2.googleapis.com/token)
        ACCESS_TOKEN=$(echo "$resp" | jq -r .access_token)
        if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" = "null" ]; then
          echo "Failed to get access token"; echo "$resp"; exit 1
        fi
        echo "access=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

    - name: Create upload session & upload
      env:
        ACCESS_TOKEN: ${{ steps.token.outputs.access }}
      run: |
        TITLE_OPTIONS=("Relaxing Nature Sounds" "Calming Ocean Waves" "Rain Sounds for Sleep" "Peaceful Forest Ambience" "Soothing River Flow" "Cozy Fireplace Ambience")
        TITLE="${TITLE_OPTIONS[$RANDOM % ${#TITLE_OPTIONS[@]}]} - Relax & Sleep"
        DESCRIPTION="Relaxing sounds and scenery — perfect for sleep, meditation, or study. Auto-uploaded."
        METADATA=$(jq -n --arg t "$TITLE" --arg d "$DESCRIPTION" '{"snippet":{"title":$t,"description":$d,"tags":["relaxing","nature","sleep","meditation"],"categoryId":"22"},"status":{"privacyStatus":"public"}}')

        # create session
        curl -s -D headers.txt -o body.txt -X POST "https://www.googleapis.com/upload/youtube/v3/videos?uploadType=resumable&part=snippet,status" \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/json; charset=UTF-8" \
          -d "$METADATA"

        UPLOAD_URL=$(grep -i '^Location:' headers.txt | awk '{print $2}' | tr -d '\r\n')
        if [ -z "$UPLOAD_URL" ]; then
          echo "Upload URL not found"; cat headers.txt; exit 1
        fi

        curl -s -X PUT -T final_video.mp4 -H "Content-Type: application/octet-stream" "$UPLOAD_URL" -o result.json
        cat result.json

