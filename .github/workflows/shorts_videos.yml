name: Auto Upload Shorts (Relaxing)

on:
  schedule:
    - cron: '0 13 * * *'  # 13:00 UTC
    - cron: '0 21 * * *'  # 21:00 UTC
  workflow_dispatch:

jobs:
  shorts_upload:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl ffmpeg

      - name: Fetch short clip (Pexels -> Pixabay -> Coverr)
        env:
          PEXELS_API_KEY: ${{ secrets.PEXELS_API_KEY }}
          PIXABAY_API_KEY: ${{ secrets.PIXABAY_API_KEY }}
          COVERR_API_KEY: ${{ secrets.COVERR_API_KEY }}
        run: |
          TOPICS=("relaxing" "rain" "ocean" "forest" "river" "fireplace" "nature")
          QUERY=${TOPICS[$RANDOM % ${#TOPICS[@]}]}
          resp=$(curl -s -H "Authorization: $PEXELS_API_KEY" "https://api.pexels.com/videos/search?query=$QUERY&per_page=15")
          COUNT=$(echo "$resp" | jq '.videos | length')
          if [ "$COUNT" -gt 0 ]; then
            INDEX=$((RANDOM % COUNT))
            VIDEO_URL=$(echo "$resp" | jq -r ".videos[$INDEX].video_files[] | select(.width<=720) | .link" | head -n1)
          fi
          if [ -z "$VIDEO_URL" ] || [ "$VIDEO_URL" = "null" ]; then
            if [ -n "$PIXABAY_API_KEY" ]; then
              presp=$(curl -s "https://pixabay.com/api/videos/?key=$PIXABAY_API_KEY&q=$QUERY&per_page=20")
              COUNT=$(echo "$presp" | jq '.hits | length')
              if [ "$COUNT" -gt 0 ]; then
                INDEX=$((RANDOM % COUNT))
                VIDEO_URL=$(echo "$presp" | jq -r ".hits[$INDEX].videos.tiny.url")
              fi
            fi
          fi
          if [ -z "$VIDEO_URL" ] || [ "$VIDEO_URL" = "null" ]; then
            if [ -n "$COVERR_API_KEY" ]; then
              cresp=$(curl -s -H "Authorization: Bearer $COVERR_API_KEY" "https://api.coverr.co/videos?per_page=10")
              VIDEO_URL=$(echo "$cresp" | jq -r '.data[0].assets[0].url')
            fi
          fi
          if [ -z "$VIDEO_URL" ] || [ "$VIDEO_URL" = "null" ]; then
            echo "No short clip found" >&2; exit 1
          fi

          curl -L "$VIDEO_URL" -o clip_raw.mp4
          # make a 45s short (cut or loop)
          ffmpeg -y -t 45 -i clip_raw.mp4 -c copy short.mp4 || ffmpeg -y -i clip_raw.mp4 -ss 0 -t 45 -c copy short.mp4
          ls -lh short.mp4

      - name: Get Access Token
        id: token
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
        run: |
          resp=$(curl -s -d client_id="$GOOGLE_CLIENT_ID" -d client_secret="$GOOGLE_CLIENT_SECRET" -d refresh_token="$YT_REFRESH_TOKEN" -d grant_type=refresh_token https://oauth2.googleapis.com/token)
          ACCESS_TOKEN=$(echo "$resp" | jq -r .access_token)
          if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" = "null" ]; then echo "Failed to get token"; echo "$resp"; exit 1; fi
          echo "access=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

      - name: Create upload session & upload short
        env:
          ACCESS_TOKEN: ${{ steps.token.outputs.access }}
        run: |
          TITLE_OPTIONS=("Relaxing Short - Ocean" "Rain Short for Sleep" "Forest Short Ambience" "Short: Calm Water Sounds")
          TITLE="${TITLE_OPTIONS[$RANDOM % ${#TITLE_OPTIONS[@]}]}"
          DESC="Short relaxing clip â€” perfect for quick calm moments. Auto-uploaded."
          METADATA=$(jq -n --arg t "$TITLE" --arg d "$DESC" '{"snippet":{"title":$t,"description":$d,"tags":["shorts","relaxing","nature"],"categoryId":"22"},"status":{"privacyStatus":"public"}}')

          curl -s -D headers.txt -o body.txt -X POST "https://www.googleapis.com/upload/youtube/v3/videos?uploadType=resumable&part=snippet,status" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json; charset=UTF-8" \
            -d "$METADATA"

          UPLOAD_URL=$(grep -i '^Location:' headers.txt | awk '{print $2}' | tr -d '\r\n')
          if [ -z "$UPLOAD_URL" ]; then echo "No upload URL"; cat headers.txt; exit 1; fi
          curl -s -X PUT -T short.mp4 -H "Content-Type: application/octet-stream" "$UPLOAD_URL" -o result.json
          cat result.json

