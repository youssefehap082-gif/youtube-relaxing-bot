name: Auto YouTube Upload (4 videos/day)

on:
  schedule:
    - cron: '0 9 * * *'   # 9 AM UTC
    - cron: '0 13 * * *'  # 1 PM UTC
    - cron: '0 17 * * *'  # 5 PM UTC
    - cron: '0 21 * * *'  # 9 PM UTC
  workflow_dispatch:

jobs:
  upload:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl ffmpeg

      - name: Get random relaxing video from Pexels
        env:
          PEXELS_API_KEY: ${{ secrets.PEXELS_API_KEY }}
        run: |
          TOPICS=("relaxing" "rain" "ocean" "forest" "river" "fireplace" "nature")
          QUERY=${TOPICS[$RANDOM % ${#TOPICS[@]}]}
          echo "Searching Pexels for: $QUERY"
          curl -s -H "Authorization: $PEXELS_API_KEY" "https://api.pexels.com/videos/search?query=$QUERY&per_page=10" > response.json
          COUNT=$(jq '.videos | length' response.json)
          if [ "$COUNT" -eq 0 ]; then
            echo "No videos found for $QUERY"
            exit 1
          fi
          INDEX=$((RANDOM % COUNT))
          VIDEO_URL=$(jq -r ".videos[$INDEX].video_files[0].link" response.json)
          echo "Downloading $VIDEO_URL"
          curl -L "$VIDEO_URL" -o video.mp4

          # تأكد من وجود صوت، لو مفيش يضيف موسيقى طبيعية بسيطة
          if ! ffmpeg -i video.mp4 -af "volumedetect" -f null /dev/null 2>&1 | grep -q "mean_volume"; then
            echo "No audio detected — adding gentle ambient sound"
            ffmpeg -f lavfi -i "anullsrc=r=44100:cl=stereo" -i video.mp4 -shortest -c:v copy -c:a aac video_with_audio.mp4 -y
            mv video_with_audio.mp4 video.mp4
          fi
          ls -lh video.mp4

      - name: Get Access Token from Refresh Token
        id: get_token
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
        run: |
          echo "Requesting new access token..."
          resp=$(curl -s \
            -d client_id="$GOOGLE_CLIENT_ID" \
            -d client_secret="$GOOGLE_CLIENT_SECRET" \
            -d refresh_token="$YT_REFRESH_TOKEN" \
            -d grant_type=refresh_token \
            "https://oauth2.googleapis.com/token")
          ACCESS_TOKEN=$(echo "$resp" | jq -r .access_token)
          if [ "$ACCESS_TOKEN" = "null" ] || [ -z "$ACCESS_TOKEN" ]; then
            echo "Failed to get access token!"
            cat <<< "$resp"
            exit 1
          fi
          echo "access=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

      - name: Upload to YouTube
        env:
          ACCESS_TOKEN: ${{ steps.get_token.outputs.access }}
        run: |
          TITLES=("Relaxing Nature Sounds 🌿" "Ocean Waves for Sleep 🌊" "Rain Sounds for Focus ☔" "Fireplace Ambience 🔥" "Peaceful Forest Stream 🍃" "River Flow for Meditation 💧")
          TITLE=${TITLES[$RANDOM % ${#TITLES[@]}]}
          DESC="Enjoy calming nature sounds and beautiful scenery. Perfect for sleep, focus, or relaxation.\nUploaded automatically via GitHub Actions (Pexels source)."

          echo "Creating video metadata..."
          METADATA=$(jq -n \
            --arg title "$TITLE" \
            --arg desc "$DESC" \
            '{"snippet": {"title": $title, "description": $desc, "tags":["relaxing","nature","sleep","focus"], "categoryId": "22"}, "status": {"privacyStatus": "public"}}')

          echo "Starting upload session..."
          INIT=$(curl -s -i -X POST "https://www.googleapis.com/upload/youtube/v3/videos?uploadType=resumable&part=snippet,status" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json; charset=UTF-8" \
            -d "$METADATA")
          echo "$INIT" > init_headers.txt
          UPLOAD_URL=$(grep -i '^Location:' init_headers.txt | awk '{print $2}' | tr -d '\r\n')

          if [ -z "$UPLOAD_URL" ]; then
            echo "Failed to get upload URL!"
            cat init_headers.txt
            exit 1
          fi

          echo "Uploading video..."
          curl -s -X PUT -T video.mp4 -H "Content-Type: video/*" "$UPLOAD_URL" -o result.json
          echo "Upload complete ✅"
          cat result.json

      - name: Done
        run: echo "✅ All done!"

